@model HomeViewModel
@{
	ViewData["Title"] = "Home Page";
}
<style>
    .svg-container {
        display: inline-block;
        position: relative;
        width: 100%;
        padding-bottom: 0%; /* aspect ratio */
        vertical-align: top;
        overflow: hidden;
    }
    .svg-content-responsive {
        display: inline-block;
        position: absolute;
        top: 0px;
        left: 0;
    }
</style>
<div class="row">
	<div class="col-md-6 col-sm-6">
		<h1>@Model.Measurement.Name</h1>
	</div>
	<div class="col-md-6" style="margin-top:0px;font-size:21px">
		@Html.DropDownList("MeasurementId", Model.Measurements)
	</div>
</div>
@Html.Partial("_IndexIndicators")
<div class="row margin-bottom-40">    
    <div style="display:block; overflow:auto; min-width:70%;float:left;">
        <div id="chartContainer"></div>
        <ul id="chartLegend"></ul>
    </div>
    <div style="float:left; min-width:30%; padding-left:30px; padding-right:15px;">
        <table class="table" style="float:left">
            <thead>
                <tr>
                    <th>Time</th>
                    @foreach (var sensorRole in Model.Measurement.SensorRoles.OrderBy(r => r.RoleName))
                    {
                    <th>@sensorRole.RoleName</th>
                    }
                    @foreach (var calc in Model.Measurement.Calculators.OrderBy(r => r.Name))
                    {
                        if (Model.Readings.Count(r => r.Count(g => g.Source == calc.Name) > 0) > 0)
                        {
                    <th>@Model.Labels[calc.Name]</th>
                        }
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var readingsGroup in Model.Readings)
            {
                <tr>
                    <td>@readingsGroup.Key.ToString("HH:mm")</td>
                    @foreach (var sensorRole in Model.Measurement.SensorRoles.OrderBy(r => r.RoleName))
                    {
                        <td>@readingsGroup.FirstOrDefault(r => r.Source == sensorRole.RoleName)?.Value</td>
                    }
                    @foreach (var calc in Model.Measurement.Calculators.OrderBy(r => r.Name))
                    {
                        if (Model.Readings.Count(r => r.Count(g => g.Source == calc.Name) > 0) > 0)
                        {
                            var val = readingsGroup.FirstOrDefault(r => r.Source == calc.Name)?.Value;
                            if (val == null)
                            {
                        <td></td>
                            }
                            else
                            {
                        <td>@Model.Calculators[calc.Name].DisplayValue(val.Value)</td>
                            }
                        }
                    }
                </tr>
            }
            </tbody>
            <tfoot>
                <tr>
                    <th>Min</th>
                    @foreach (var sensorRole in Model.Measurement.SensorRoles.OrderBy(r => r.RoleName))
                {
                    @if (Model.Statistics.ContainsKey(sensorRole.RoleName))
                    {
                    <th>@Model.Statistics[sensorRole.RoleName].Item1</th>
                    }
                }
                    @foreach (var calc in Model.Measurement.Calculators.OrderBy(r => r.Name))
                {
                    if (Model.Readings.Count(r => r.Count(g => g.Source == calc.Name) > 0) > 0)
                    {
                    <th>@Model.Calculators[calc.Name].DisplayValue(Model.Statistics[calc.Name].Item1)</th>
                    }
                }
                </tr>
                <tr>
                    <th>Max</th>
                    @foreach (var sensorRole in Model.Measurement.SensorRoles.OrderBy(r => r.RoleName))
                {
                    @if (Model.Statistics.ContainsKey(sensorRole.RoleName))
                    {
                    <th>@Model.Statistics[sensorRole.RoleName].Item2</th>
                    }
                }
                    @foreach (var calc in Model.Measurement.Calculators.OrderBy(r => r.Name))
                {
                    if (Model.Readings.Count(r => r.Count(g => g.Source == calc.Name) > 0) > 0)
                    {
                    <th>@Model.Calculators[calc.Name].DisplayValue(Model.Statistics[calc.Name].Item2)</th>
                    }
                }
                </tr>
            </tfoot>
        </table>
    </div>
</div>

@section scripts {
<script src="@Url.Content("~/js/chartModule.js")"></script>
<script type="text/javascript">	
	var offset = @TimeZoneInfo.Local.BaseUtcOffset.TotalHours;
	var data = @Html.Raw(JsonConvert.SerializeObject(Model.ChartData));
	var strokes = ['blue','red','green','brown','orange','yellow','pink'];
	var calcsOnChart = @Html.Raw(JsonConvert.SerializeObject(Model.CalculatorsOnChart));
	var refreshUrl = '@Url.Action()';

	for(var i = 0; i < data.length; i++)
	{
		for(var j = data[i].length-1; j >= 0; j--)
		{
			if($.inArray(data[i][j].Source, calcsOnChart) < 0)   
			{
				data[i].splice(j, 1);                
			}
		}        
	}

	$(document).ready(function () {

		if(data.length > 0)
		{
			frontPageChart();
		}

        window.addEventListener('resize', function (event) {
            console.log("Resize!");
			if(data.length > 0)
			{
				frontPageChart();
            }
		});

		$('#MeasurementId').change(function() {
			var measurementId = $(this).val();
			document.location.href = refreshUrl + '?measurementId=' + measurementId;
		})

		setTimeout(function() {
			var measurementId = $('#MeasurementId').val();
			document.location.href = refreshUrl + '?measurementId=' + measurementId + '&tmp=' + new Date().getTime();
		}, 5*60*1000);
	});
</script>
}