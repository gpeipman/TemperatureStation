@model HomeViewModel
@{
	ViewData["Title"] = "Home Page";
}

<div class="row">
	<div class="col-md-6">
		<h2>@Model.Measurement.Name</h2>
	</div>
</div>
<div class="row">
	<div class="col-md-3">
		<dl class="dl-horizontal">
			<dt>
				@Html.DisplayNameFor(model => model.Measurement.CoolingRate)
			</dt>
			<dd>
				@if (Model.Measurement.CoolingRate.HasValue)
				{
					@Math.Round(Model.Measurement.CoolingRate.Value, 4)
				}
			</dd>
			<dt>
				@Html.DisplayNameFor(model => model.Measurement.FreezingPoint)
			</dt>
			<dd>
				@Html.DisplayFor(model => model.Measurement.FreezingPoint)
			</dd>
		</dl>
	</div>
	<div class="col-md-3">
		<dl class="dl-horizontal">
			<dt>
				@Html.DisplayNameFor(model => model.Measurement.OriginalGravity)
			</dt>
			<dd>
				@Html.DisplayFor(model => model.Measurement.OriginalGravity)
			</dd>
			<dt>
				@Html.DisplayNameFor(model => model.Measurement.FinalGravity)
			</dt>
			<dd>
				@Html.DisplayFor(model => model.Measurement.FinalGravity)
			</dd>
		</dl>
	</div>
	<div class="col-md-3">
		<dl class="dl-horizontal">
			<dt>
				@Html.DisplayNameFor(model => model.Measurement.AlcoholByVolume)
			</dt>
			<dd>
				@Html.DisplayFor(model => model.Measurement.AlcoholByVolume)
			</dd>
			<dt>
				@Html.DisplayNameFor(model => model.Measurement.AlcoholByWeight)
			</dt>
			<dd>
				@Html.DisplayFor(model => model.Measurement.AlcoholByWeight)
			</dd>
		</dl>
	</div>
</div>
<div class="row">    
	<div class="col-md-6">
		<div  id="chartContainer"><svg id="chart" /></div>
		
		<ul id="chartLegend">
			
		</ul>
	</div>
	<div class="col-md-6">       
		<table class="table">
			<thead>
				<tr>
					<th>Time</th>
					@foreach (var sensorRole in Model.Measurement.SensorRoles.OrderBy(r => r.RoleName))
					{
						<th>@sensorRole.RoleName</th>
					}
					@foreach (var calc in Model.Measurement.Calculators.OrderBy(r => r.Name))
					{
						if (Model.Readings.Count(r => r.Count(g => g.Source == calc.Name) > 0) > 0)
						{
						<th>@Model.Labels[calc.Name]</th>
						}
					}
				</tr>
			</thead>
			<tbody>
				@foreach (var readingsGroup in Model.Readings)
				{
					<tr>
						<td>@readingsGroup.Key.ToString("HH:mm")</td>
						@foreach (var sensorRole in Model.Measurement.SensorRoles.OrderBy(r => r.RoleName))
						{
							<td>@readingsGroup.FirstOrDefault(r => r.Source == sensorRole.RoleName)?.Value</td>
						}
						@foreach (var calc in Model.Measurement.Calculators.OrderBy(r => r.Name))
						{
							if (Model.Readings.Count(r => r.Count(g => g.Source == calc.Name) > 0) > 0)
							{
								var val = readingsGroup.FirstOrDefault(r => r.Source == calc.Name)?.Value;
								if (val == null)
								{
									<td></td>
								}
								else
								{
									<td>@Model.Calculators[calc.Name].DisplayValue(val.Value)</td>
								}							
							}
						}
					</tr>
				}
			</tbody>
            <tfoot>
                <tr>
                    <th>Min</th>
                    @foreach (var sensorRole in Model.Measurement.SensorRoles.OrderBy(r => r.RoleName))
                    {
                        <td>@Model.Statistics[sensorRole.RoleName].Item1</td>
                    }
                    @foreach (var calc in Model.Measurement.Calculators.OrderBy(r => r.Name))
                    {
                        if (Model.Readings.Count(r => r.Count(g => g.Source == calc.Name) > 0) > 0)
                        {
                            <td>@Model.Statistics[calc.Name].Item1</td>
                        }
                    }
                </tr>
                <tr>
                    <th>Max</th>
                    @foreach (var sensorRole in Model.Measurement.SensorRoles.OrderBy(r => r.RoleName))
                    {
                        <td>@Model.Statistics[sensorRole.RoleName].Item2</td>
                    }
                    @foreach (var calc in Model.Measurement.Calculators.OrderBy(r => r.Name))
                    {
                        if (Model.Readings.Count(r => r.Count(g => g.Source == calc.Name) > 0) > 0)
                        {
                            <td>@Model.Statistics[calc.Name].Item2</td>
                        }
                    }
                </tr>
            </tfoot>
		</table>
	</div>
</div>

@section scripts {
<script type="text/javascript">	
	var offset = @TimeZoneInfo.Local.BaseUtcOffset.TotalHours;
	var data = @Html.Raw(JsonConvert.SerializeObject(Model.ChartData));
	var strokes = ['blue','red','green','brown','orange','yellow','pink'];
	var calcsOnChart = @Html.Raw(JsonConvert.SerializeObject(Model.CalculatorsOnChart));

	for(var i = 0; i < data.length; i++)
	{
		for(var j = data[i].length-1; j >= 0; j--)
		{
			if($.inArray(data[i][j].Source, calcsOnChart) < 0)   
			{
				data[i].splice(j, 1);                
			}
		}        
	}

	$(document).ready(function () {
		frontPageChart();

		window.addEventListener('resize', function(event){
			frontPageChart(); // just call it again...
		});
	});
</script>
}